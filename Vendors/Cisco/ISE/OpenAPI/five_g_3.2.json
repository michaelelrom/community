{
  "openapi": "3.0.3",
  "info": {
    "title": "Cisco ISE FiveG",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://example:443",
      "description": "Inferred Url"
    }
  ],
  "tags": [
    {
      "name": "fiveg-api-controller",
      "description": "the fiveg API"
    }
  ],
  "paths": {
    "/api/v1/fiveg/subscriber": {
      "get": {
        "tags": ["Subscriber"],
        "summary": "Get all subscribers",
        "operationId": "getAllSubscribers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of objects returned per page",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "<div> <style type=\"text/css\" scoped> .apiServiceTable td, .apiServiceTable th { padding: 5px 10px !important; text-align: left; } </style> <span> <b>Simple filtering</b> should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the <i>\"filterType=or\"</i> query string parameter. Each resource Data model description should specify if an attribute is a filtered field. </span> <br /> <br/> <table class=\"apiServiceTable\"> <thead> <tr> <th>OPERATOR</th> <th>DESCRIPTION</th> <th>APPLICABLE ON FIELDS<th> </tr> </thead> <tbody> <tr> <td>EQ</td> <td>Equals</td> <td>enabled, imsi, identityGroups</td> </tr> <tr> <td>NEQ</td> <td>Not Equals</td> <td>enabled, imsi, identityGroups</td> </tr> <tr> <td>GT</td> <td>Greater Than</td> <td>createTime, updateTime</td> </tr> <tr> <td>LT</td> <td>Less Then</td> <td>createTime, updateTime</td> </tr> <tr> <td>STARTSW</td> <td>Starts With</td> <td>imsi, identityGroups</td> </tr> <tr> <td>NSTARTSW</td> <td>Not Starts With</td> <td>identityGroups</td> </tr> <tr> <td>ENDSW</td> <td>Ends With</td> <td>imsi, identityGroups</td> </tr> <tr> <td>NENDSW</td> <td>Not Ends With</td> <td>identityGroups</td> </tr> <tr> <td>CONTAINS</td> <td>Contains</td> <td>imsi, identityGroups</td> </tr> <tr> <td>NCONTAINS</td> <td>Not Contains</td> <td>imsi, identityGroups</td> </tr> </tbody> </table> </div>",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterType",
            "in": "query",
            "description": "The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "enum": ["AND", "OR"]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort type - asc or desc",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort column, by which subscribers needs to be sorted. Applicable on fields - imsi, friendlyName, enabled, createTime, updateTime",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscribers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberGetAllResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "post": {
        "tags": ["Subscriber"],
        "summary": "Create a subscriber",
        "operationId": "createSubscriber",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponsePayload"
                }
              }
            }
          },
          "201": {
            "description": "Subscriber created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/subscriber/bulk": {
      "post": {
        "tags": ["Subscriber"],
        "summary": "Create, update and delete subscribers in bulk",
        "operationId": "bulkSubscriberOperation",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task accepted ID can be used to track the task through the task API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/subscriber/imsi/{imsi}": {
      "get": {
        "tags": ["Subscriber"],
        "summary": "Get a subscriber based on the IMSI",
        "operationId": "getSubscriberByIMSI",
        "parameters": [
          {
            "name": "imsi",
            "in": "path",
            "description": "IMSI parameter",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber retrieved successfully based on the IMSI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/subscriber/{subscriberId}": {
      "get": {
        "tags": ["Subscriber"],
        "summary": "Get the subscriber for a given ID",
        "operationId": "getSubscriberById",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique ID for a subscriber object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber retrieved successfully for the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponsePayload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "put": {
        "tags": ["Subscriber"],
        "summary": "Update a subscriber for a given ID and request payload",
        "operationId": "updateSubscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique ID for a subscriber object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscriber updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponsePayload"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Subscriber"],
        "summary": "Delete the subscriber for a given ID",
        "operationId": "deleteSubscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique ID for a subscriber object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment": {
      "get": {
        "tags": ["User Equipment"],
        "summary": "Get all user equipments",
        "operationId": "getUserEquipments",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of objects returned per page",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "<div> <style type=\"text/css\" scoped> .apiServiceTable td, .apiServiceTable th { padding: 5px 10px !important; text-align: left; } </style> <span> <b>Simple filtering</b> should be available through the filter query string parameter. The structure of a filter is a triplet of field operator and value separated with dots. More than one filter can be sent. The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the <i>\"filterType=or\"</i> query string parameter. Each resource Data model description should specify if an attribute is a filtered field. </span> <br /> <br/> <table class=\"apiServiceTable\"> <thead> <tr> <th>OPERATOR</th> <th>DESCRIPTION</th> <th>APPLICABLE ON FIELDS<th> </tr> </thead> <tbody> <tr> <td>EQ</td> <td>Equals</td> <td>imei, deviceGroup</td> </tr> <tr> <td>NEQ</td> <td>Not Equals</td> <td>imei, deviceGroup</td> </tr> <tr> <td>GT</td> <td>Greater Than</td> <td>createTime, updateTime</td> </tr> <tr> <td>LT</td> <td>Less Then</td> <td>createTime, updateTime</td> </tr> <tr> <td>STARTSW</td> <td>Starts With</td> <td>imei, deviceGroup</td> </tr> <tr> <td>NSTARTSW</td> <td>Not Starts With</td> <td>deviceGroup</td> </tr> <tr> <td>ENDSW</td> <td>Ends With</td> <td>imei, deviceGroup</td> </tr> <tr> <td>NENDSW</td> <td>Not Ends With</td> <td>deviceGroup</td> </tr> <tr> <td>CONTAINS</td> <td>Contains</td> <td>imei, deviceGroup</td> </tr> <tr> <td>NCONTAINS</td> <td>Not Contains</td> <td>imei, deviceGroup</td> </tr> </tbody> </table> </div>",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterType",
            "in": "query",
            "description": "The logical operator common to ALL filter criteria will be by default AND, and can be changed by using the parameter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "enum": ["AND", "OR"]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "sort type - asc or desc",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort column, by which user equipments needs to be sorted. Applicable on fields - imei, createTime, updateTime",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User equipments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentGetAllResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "post": {
        "tags": ["User Equipment"],
        "summary": "Create a user equipment",
        "operationId": "createUserEquipment",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEquipmentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentResponsePayload"
                }
              }
            }
          },
          "201": {
            "description": "User equipment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment/bulk": {
      "post": {
        "tags": ["User Equipment"],
        "summary": "Create, update and delete user equipments in bulk",
        "operationId": "bulkUserEquipmentOperation",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationsUE"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task accepted ID can be used to track the task through the task API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment/csv": {
      "post": {
        "tags": ["User Equipment"],
        "summary": "Create user equipments from a CSV file",
        "operationId": "createUserEquipmentsFromCSV",
        "parameters": [
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["fileName"],
                "type": "object",
                "properties": {
                  "fileName": {
                    "type": "string",
                    "description": "fileName",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task accepted ID can be used to track the task through the task API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment/imei/{imei}": {
      "get": {
        "tags": ["User Equipment"],
        "summary": "Get a user equipment based on the IMEI",
        "operationId": "getUserEquipmentByIMEI",
        "parameters": [
          {
            "name": "imei",
            "in": "path",
            "description": "IMEI for the user equipment object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User equipment retrieved successfully based on the IMEI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment/subscriber/{subscriberId}": {
      "get": {
        "tags": ["User Equipment"],
        "summary": "Get all user equipments associated with a subscriber ID",
        "operationId": "getUserEquipmentsBySubscriberId",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "Unique ID for a subscriber object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User equipments retrieved successfully for the given subscriber ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentsForSubscriberResponsePayload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/v1/fiveg/user-equipment/{userEquipmentId}": {
      "get": {
        "tags": ["User Equipment"],
        "summary": "Get the user equipment for a given ID",
        "operationId": "getUserEquipmentById",
        "parameters": [
          {
            "name": "userEquipmentId",
            "in": "path",
            "description": "Unique ID for a user equipment object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User equipment retrieved successfully for the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentResponsePayload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "put": {
        "tags": ["User Equipment"],
        "summary": "Update the user equipment for a given ID and request payload",
        "operationId": "updateUserEquipment",
        "parameters": [
          {
            "name": "userEquipmentId",
            "in": "path",
            "description": "Unique ID for a user equipment object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEquipmentUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User equipment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEquipmentResponsePayload"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["User Equipment"],
        "summary": "Delete the user equipment for a given ID",
        "operationId": "deleteUserEquipment",
        "parameters": [
          {
            "name": "userEquipmentId",
            "in": "path",
            "description": "Unique ID for a user equipment object",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Request-ID",
            "in": "header",
            "description": "The request ID is returned in the response headers and appear in logs",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User equipment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request for this specified resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "description": "Basic authorization",
        "scheme": "basic"
      }
    },
    "schemas": {
      "DeleteResponse": {
        "title": "DeleteResponse",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Resource with ID 8d32371d-ee1a-47ce-995f-5966dec3c5dc was deleted successfully"
          }
        }
      },
      "Error": {
        "title": "Error",
        "required": ["code", "message"],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Link": {
        "title": "Link",
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "example": "https://<ip>/api/v1/fiveg/<userEquipment/subscriber>/<ID>"
          },
          "rel": {
            "type": "string",
            "example": "self",
            "enum": ["next", "previous", "self", "status"]
          },
          "type": {
            "type": "string",
            "example": "application/json"
          }
        }
      },
      "Operations": {
        "title": "Operations",
        "type": "object",
        "properties": {
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberBulkRequest"
            }
          },
          "operation": {
            "type": "string",
            "enum": ["Create", "Delete", "Update"]
          }
        }
      },
      "OperationsUE": {
        "title": "OperationsUE",
        "type": "object",
        "properties": {
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEquipmentBulkRequest"
            }
          },
          "operation": {
            "type": "string",
            "enum": ["Create", "Delete", "Update"]
          }
        }
      },
      "SubscriberBulkRequest": {
        "title": "SubscriberBulkRequest",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Subscriber is enabled or not",
            "example": true
          },
          "friendlyName": {
            "type": "string",
            "description": "Friendly name for the subscriber",
            "example": "FriendlyName"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7c9484cf-0ebc-47ad-a9ef-bc12729ed73d"
          },
          "identityGroups": {
            "type": "string",
            "description": "Identity Groups. If you add more than one identity group, they need to be comma separated",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f,7b9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "imeis": {
            "type": "string",
            "description": "Comma separated IMEIs to be attached to the subscriber",
            "example": "490154203237518,490154203237515"
          },
          "imsi": {
            "type": "string",
            "description": "IMSI for Subscriber",
            "example": "490154203237518"
          },
          "ki": {
            "type": "string",
            "description": "KI",
            "example": "12345678901234567890123456789012"
          },
          "opc": {
            "type": "string",
            "description": "OPC",
            "example": "12345678901234567890123456789012"
          }
        }
      },
      "SubscriberCreateRequest": {
        "title": "SubscriberCreateRequest",
        "required": ["imsi", "ki", "opc"],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Subscriber is enabled or not",
            "example": true
          },
          "friendlyName": {
            "type": "string",
            "description": "Friendly name for the subscriber",
            "example": "FriendlyName"
          },
          "identityGroups": {
            "type": "string",
            "description": "Identity Groups. If you add more than one identity group, they need to be comma separated",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f,7b9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "imeis": {
            "type": "string",
            "description": "IMEI to be attached to the subscriber",
            "example": "490154203237518"
          },
          "imsi": {
            "type": "string",
            "description": "IMSI for subscriber",
            "example": "490154203237518"
          },
          "ki": {
            "type": "string",
            "description": "KI",
            "example": "12345678901234567890123456789012"
          },
          "opc": {
            "type": "string",
            "description": "OPC",
            "example": "12345678901234567890123456789012"
          }
        }
      },
      "SubscriberGetAllResponsePayload": {
        "title": "SubscriberGetAllResponsePayload",
        "type": "object",
        "properties": {
          "nextPage": {
            "$ref": "#/components/schemas/Link"
          },
          "previousPage": {
            "$ref": "#/components/schemas/Link"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberResponse"
            }
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "SubscriberResponse": {
        "title": "SubscriberResponse",
        "required": ["imsi", "ki", "opc"],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "description": "Subscriber is enabled or not",
            "example": true
          },
          "friendlyName": {
            "type": "string",
            "description": "Friendly name for the subscriber",
            "example": "FriendlyName"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7c9484cf-0ebc-47ad-a9ef-bc12729ed73d"
          },
          "identityGroups": {
            "type": "string",
            "description": "Identity Groups. If you add more than one identity group, they need to be comma separated",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f,7b9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "imeis": {
            "type": "string",
            "description": "IMEI to be attached to the subscriber",
            "example": "490154203237518"
          },
          "imsi": {
            "type": "string",
            "description": "IMSI for subscriber",
            "example": "490154203237518"
          },
          "ki": {
            "type": "string",
            "description": "KI",
            "example": "12345678901234567890123456789012"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "opc": {
            "type": "string",
            "description": "OPC",
            "example": "12345678901234567890123456789012"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "SubscriberResponsePayload": {
        "title": "SubscriberResponsePayload",
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/SubscriberResponse"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "SubscriberUpdateRequest": {
        "title": "SubscriberUpdateRequest",
        "required": ["ki", "opc"],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Subscriber is enabled or not",
            "example": true
          },
          "friendlyName": {
            "type": "string",
            "description": "Friendly name for the subscriber",
            "example": "FriendlyName"
          },
          "identityGroups": {
            "type": "string",
            "description": "Identity Groups. If you add more than one identity group, they need to be comma separated",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f,7b9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "imeis": {
            "type": "string",
            "description": "IMEI to be attached to the subscriber",
            "example": "490154203237518"
          },
          "ki": {
            "type": "string",
            "description": "KI",
            "example": "12345678901234567890123456789012"
          },
          "opc": {
            "type": "string",
            "description": "OPC",
            "example": "12345678901234567890123456789012"
          }
        }
      },
      "TaskResponse": {
        "title": "TaskResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "UserEquipmentBulkRequest": {
        "title": "UserEquipmentBulkRequest",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Sample Description"
          },
          "deviceGroup": {
            "type": "string",
            "description": "Device or Endpoint Group",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7c9484cf-0ebc-47ad-a9ef-bc12729ed73b"
          },
          "imei": {
            "type": "string",
            "example": "490154203237518"
          }
        }
      },
      "UserEquipmentCreateRequest": {
        "title": "UserEquipmentCreateRequest",
        "required": ["imei"],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description for User Equipment",
            "example": "User Equipment"
          },
          "deviceGroup": {
            "type": "string",
            "description": "Device or Endpoint Group",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "imei": {
            "type": "string",
            "description": "IMEI for User Equipment",
            "example": "490154203237518"
          }
        }
      },
      "UserEquipmentGetAllResponsePayload": {
        "title": "UserEquipmentGetAllResponsePayload",
        "type": "object",
        "properties": {
          "nextPage": {
            "$ref": "#/components/schemas/Link"
          },
          "previousPage": {
            "$ref": "#/components/schemas/Link"
          },
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEquipmentResponse"
            }
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "UserEquipmentResponse": {
        "title": "UserEquipmentResponse",
        "required": ["imei"],
        "type": "object",
        "properties": {
          "createTime": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Description for User Equipment",
            "example": "User Equipment"
          },
          "deviceGroup": {
            "type": "string",
            "description": "Device or Endpoint Group",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "7c9484cf-0ebc-47ad-a9ef-bc12729ed73b"
          },
          "imei": {
            "type": "string",
            "description": "IMEI for User Equipment",
            "example": "490154203237518"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "updateTime": {
            "type": "string"
          }
        }
      },
      "UserEquipmentResponsePayload": {
        "title": "UserEquipmentResponsePayload",
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/UserEquipmentResponse"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "UserEquipmentUpdateRequest": {
        "title": "UserEquipmentUpdateRequest",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description for User Equipment",
            "example": "User Equipment"
          },
          "deviceGroup": {
            "type": "string",
            "description": "Device or Endpoint Group",
            "example": "7a9484cf-0ebc-47ad-a9ef-bc12729ed73f"
          }
        }
      },
      "UserEquipmentsForSubscriberResponsePayload": {
        "title": "UserEquipmentsForSubscriberResponsePayload",
        "type": "object",
        "properties": {
          "response": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEquipmentResponse"
            }
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      }
    }
  }
}
